///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Mohdeep Singh
Student ID#: 109600239

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1. Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers (constant literals)? Using the details of this workshop, describe at least three advantages this provides us?

Answer1: We try to make use of variable and macros instead of magic number so that we can read and understand the 
	  meaning quickly. This is makes code more clear by naming the variable and macros with meaningful names.

	 1.Assingning meaninful names to variables & macros improves the readibilty and understanding of the code.
	   When someone read the code, they can quickly grasp the meanining of the variable.
         2.Resusebilty:  By using the varaibles we can reuse the same value in multiple places within our code.
	 3.Readable debugging: when debugging the code, it is often more helpful to see variable with meaningful
	    names rather seeing numerical value.



2. The rating values entered by the user required iteration to perform basic validations with each iteration concentrated on testing for values to be within a specific range. Why do we not include additional logic that sums and performs the average? Instead, the sum and average logic is placed outside of any validation routine. Briefly explain two reasons why this is better design and refer to the details of this workshop to justify your answer.	

Answer2:     We always place sum and logical operation outside of the validation routine because of the following reasons.
	  
	  1. Seperation of Concerns :  This means that different aspects of the program should be logically seperated. The primary responsibilty is to check if the entered value from the user matches with the specific range.
	     we have to keep validation logic focused so that the code becomes more modular and easy to understand, maintain and debug. 

	  2. Reusability and Extensibilty : This means that placing sum & average logic outside, promotes reusability and extensibility. The validation routine is independent of a specific type of calculations. This type of modular design 	      approach make a code more flexible and easy to adapt changes in the future.
		