///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #8
Full Name  : Mohdeep Singh
Student ID#: 109600239

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

Answer 1: One of the benifit is reusability and flexibilty. This allows the the developer to choose mutiple way of returning values. It also increases the code clarity and readibilty.  
Sometimes, when functions return values via arguments, it can make the code easier to understand. this shows clearly that variables which are modified by the function. It can make code easier and straightfroward.

one negative reason is, when I design a function that returns a value both by modifying an argument and using a return statement, it can be confusing to understand how the function works and where to find the result. Especially in big projects, it becomes hard to keep track of how the data flows and which value is the latest or correct 

Answer 2 : function with less cohesion is ' calculateReportData'
    Explanation:
 In the calculateReportData function, I need to create a ReportData structure and fill it with information from the received CatFoodInfo structure. However, besides directly assigning values from CatFoodInfo, I also have to perform calculations to get derived values like conversions and cost calculations. This mix of tasks makes the function less organized and focused.
To improve cohesion, the calculations should be extracted into separate functions. For example, functions like convertLbsKg, convertLbsG, calculateServings, calculateCostPerServing, and calculateCostPerCal can be created to handle these calculations. 

function with coupling is 'start'

Explanation : this is high coupling because it performs several tasks,  user input, data processing, analysis. this makes function large, defficult to read and hard to maintain.
I can inprove this coupling by making this function to cplit into smaller, more focused function, each handling a specific task. 

Answer 3. pasing structures to function offers lots of benifts.
1. improve readibilty: structures help us group related data together, making code more organized and easier to read. when we call function with structured data as a parameter, it becomes more self explanatory, because the purpose of data is clear from the structs name.
data integrity: by passign structs, we ensure that all related data stays together and passes as a whole. this keeps data consistent.

To make passing structures data more efficient, we can use pointers . its better to pass pointer to the structures instead of passing the whole structure value. This avoids creating unnecessary copies of the data, saving memory and this could improve performance. 

'displayCatFoodData' function can be improve by removing unused parameter. This function is only shwoing not changing hence we can remove calariesPerServing and weightLbs. This will make the function cleaner and less cluttered. 